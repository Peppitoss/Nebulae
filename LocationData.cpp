#include"LocationData.h"
#include"VesselGlobalList.h"
#include"MissionCaptionCollection.h"


int LocationData::pInitialAutoGenerationID = 1000;

LocationData::LocationData()
{
	//this->pIncludePlayerInLocation = true;
	pCurrentAutoGeneratedShipID = pInitialAutoGenerationID;
	pShipList = std::vector<ShipModel>();
}

LocationData::LocationData(std::function<void(LocationData*)> initializer, bool initialize) : LocationData()
{
	pCurrentAutoGeneratedShipID = pInitialAutoGenerationID;
	this->pInitializer = initializer;
	if (initialize)
		InitializeLocation();
}

void LocationData::InitializeLocation()
{
	if(pInitializer)
		this->pInitializer(this);
}

void LocationData::SetInterior(InteriorModel model)
{
	this->pInterior = model;
}

int LocationData::GetShipAmount()
{
	return this->pShipList.size();
}

std::vector<ShipModel> LocationData::ShipList() const
{
	return this->pShipList;
}


bool LocationData::ShipIdExistsInList( int ID)
{
	for (auto it = this->pShipList.begin(); it != this->pShipList.end(); ++it)
	{
		if (it->GetID() == ID)
			return true;
	}
	return false;
}

void LocationData::AddVessel(std::vector<std::string>& vessel, int amount, enumAllegiance allegiance, const Coord& locationSize)
{
	for( int j = 0; j < amount; j++)
		for (int i = 0; i < vessel.size(); i++)
		{
			ShipModel toAdd = ShipModel(vessel[i], pCurrentAutoGeneratedShipID++, Coord(statistics::GetIntInRange(-locationSize.x/2, locationSize.x/2), statistics::GetIntInRange(-locationSize.y/2, locationSize.y/2)));
			this->AddVessel(toAdd, allegiance);
		}
}

void LocationData::AddVessel(ShipModel ship, enumAllegiance allegiance)
{
	ship.SetAllegiance(allegiance);
	if (ShipIdExistsInList(ship.GetID()))
		throw new std::exception("Error cannot add ship to location, its ID already exist!");
	this->pShipList.push_back(ship);
}

ShipModel LocationData::GetVesselFromName(string name)
{
	for (auto it = this->pShipList.begin(); it != this->pShipList.end(); ++it)
	{
		if (it->GetName() == name)
			return (*it);
	}
	return ShipModel("NameNotFound", -1, Coord(0));
}

ShipModel LocationData::GetVesselFromID(int ID)
{
	for (auto it = this->pShipList.begin(); it != this->pShipList.end(); ++it)
	{
		if (it->GetID() == ID)
			return (*it);
	}
	return ShipModel("NameNotFound", -1, Coord(0));
}
